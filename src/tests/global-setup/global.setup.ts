import 'dotenv/config';
import fs from 'fs/promises';
import path from 'path';
import { AdminLoginPage, AdminTopicsPage } from '@core/page-object/pages/admin';
import { test as setup } from '@playwright/test';
import { AdminApiClient } from '@core/api/clients/admin.client';
import { generateUsers, generateTestData, userGenerator } from '@core/api/generators';

setup('admin global setup', async ({ page }): Promise<void> => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const { KAMPUS_ADMIN_BASE_URL, TEST_USER_SUPERADMIN_EMAIL, TEST_USER_PASSWORD } = process.env;

  if (!KAMPUS_ADMIN_BASE_URL || !TEST_USER_SUPERADMIN_EMAIL || !TEST_USER_PASSWORD) {
    throw new Error(
      '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: KAMPUS_ADMIN_BASE_URL, TEST_USER_SUPERADMIN_EMAIL, TEST_USER_PASSWORD',
    );
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Ä—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminLoginPage = new AdminLoginPage(page);
  const adminTopicsPage = new AdminTopicsPage(page);

  await adminLoginPage.visit('/');
  await adminLoginPage.login(TEST_USER_SUPERADMIN_EMAIL, TEST_USER_PASSWORD);
  await adminTopicsPage.validateH1Text();
  await adminTopicsPage.header.clickRedirectToUserPartBtn({ saveState: true });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const token = await adminTopicsPage.page.evaluate(() => {
    return localStorage.getItem('authorizationToken');
  });

  if (!token) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }

  process.env.BEARER_TOKEN = token;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–æ—Ä—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  await page.context().storageState({ path: '.auth/admin.json' });

  await prepareTestData();
});

async function saveTestData(data: object, filePath: string): Promise<void> {
  const fullPath = path.join(process.cwd(), filePath);
  await fs.writeFile(fullPath, JSON.stringify(data, null, 2));
  console.log(`üéâüöÄ –£—Ä–∞! –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`);
}

async function prepareTestData() {
  const adminApiClient = new AdminApiClient();

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
  const superAdminData = userGenerator({ roleId: 1 });
  const createdSuperAdmin = await adminApiClient.createUser(superAdminData);

  const { id: superadminId, login: superadminEmail } = createdSuperAdmin;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
  process.env.TEST_USER_SUPERADMIN_EMAIL = superadminEmail;
  process.env.TEST_USER_PASSWORD = superAdminData.password;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
  const { accessToken: superadminToken } = await adminApiClient.login({
    username: superadminEmail,
    password: superAdminData.password,
  });

  process.env.BEARER_TOKEN = superadminToken;

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const initialStructures = await generateTestData(adminApiClient);
  const testData = {
    structures: initialStructures,
    users: await generateUsers(adminApiClient, {
      department: initialStructures.department.id,
      function: initialStructures.functionInternal.name,
      position: +initialStructures.reward.id,
      managerId: superadminId,
    }),
  };

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await adminApiClient.lockUserLogin(testData.users.bannedUser.id);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
  await saveTestData(testData, 'src/config/test-data.json');
}
